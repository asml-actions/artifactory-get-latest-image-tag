name: Get latest image tag from Artifactory
description: load the last updated image tag from Artifactory (excluding the 'latest' tag)
inputs:
  ARTIFACTORY_URL:
    description: Url to the Artifactory server, including https
    required: true
  REPO_KEY:
    description: Key of the Artifactory repository to search in
    required: true 
  IMAGE_NAME:
    description: Name of the image to get the latest tag for
    required: true
  ARTIFACTORY_TOKEN:
    description: API token to load the data with
    required: true  
  PREFIX:
    description: Filter the tags with this prefix before returning the last updated tag
    required: false
outputs:
  tag: 
    description: The value of the last tag that was updated
    value: ${{ steps.tag.outputs.tag }}
runs:
  using: composite
  steps:
    - name: Load version from Artifactory
      shell: bash
      id: tag
      env:
        ARTIFACTORY_URL: ${{ inputs.ARTIFACTORY_URL }}
        REPO_KEY: ${{ inputs.REPO_KEY }}
        IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
        ARTIFACTORY_TOKEN: ${{ inputs.ARTIFACTORY_TOKEN }}
        PREFIX: ${{ inputs.PREFIX }}
      run: |
        if [[ "$ACTIONS_STEP_DEBUG" == "true" ]]; then
          curl --version
        fi

        url="${ARTIFACTORY_URL}/api/docker/${REPO_KEY}/v2/${IMAGE_NAME}/tags/list"
        echo "Calling Artifactory to load the latest version tag for the runner image through [$url]"
        response=$(curl $url --header "X-JFrog-Art-Api: ${ARTIFACTORY_TOKEN}" --show-error --fail)
        # note: after curl v 7.76.0 we can use the fail option below to get more info:
        # --fail-with-body
        if [[ "$ACTIONS_STEP_DEBUG" == "true" ]]; then
          echo "Found this response: "
          echo "$response"
        fi

        if [[ "$PREFIX" != "" ]]; then
          # filter the tags before searching for the last updated tag
          echo "Got this prefix to filter on: [$PREFIX]" 
          allTags=$(echo $response | jq .tags[] -r)
          tag=$((IFS=$'\n' && echo "${allTags[*]}") | grep "^${PREFIX}" | tail -1)
          echo "Filtered: $tag"
        else 
            # load the previous to last item from the tags in the resonse
            tag=$(echo $response | jq .tags[-1] -r)
        fi
        echo "Found the last updated tag to be [$tag]"
        echo "::set-output name=tag::$tag"
